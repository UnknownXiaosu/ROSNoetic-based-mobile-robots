# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from whi_interfaces/WhiBoundingBox.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class WhiBoundingBox(genpy.Message):
  _md5sum = "ecec343062f58885bb78dad9096cfd28"
  _type = "whi_interfaces/WhiBoundingBox"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string cls
float64 acc_prob
string state
float64 state_prob
geometry_msgs/Pose left_top
geometry_msgs/Pose right_bottom
geometry_msgs/Pose init_pose
geometry_msgs/Pose target_pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['cls','acc_prob','state','state_prob','left_top','right_bottom','init_pose','target_pose']
  _slot_types = ['string','float64','string','float64','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cls,acc_prob,state,state_prob,left_top,right_bottom,init_pose,target_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WhiBoundingBox, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cls is None:
        self.cls = ''
      if self.acc_prob is None:
        self.acc_prob = 0.
      if self.state is None:
        self.state = ''
      if self.state_prob is None:
        self.state_prob = 0.
      if self.left_top is None:
        self.left_top = geometry_msgs.msg.Pose()
      if self.right_bottom is None:
        self.right_bottom = geometry_msgs.msg.Pose()
      if self.init_pose is None:
        self.init_pose = geometry_msgs.msg.Pose()
      if self.target_pose is None:
        self.target_pose = geometry_msgs.msg.Pose()
    else:
      self.cls = ''
      self.acc_prob = 0.
      self.state = ''
      self.state_prob = 0.
      self.left_top = geometry_msgs.msg.Pose()
      self.right_bottom = geometry_msgs.msg.Pose()
      self.init_pose = geometry_msgs.msg.Pose()
      self.target_pose = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cls
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.acc_prob
      buff.write(_get_struct_d().pack(_x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_29d().pack(_x.state_prob, _x.left_top.position.x, _x.left_top.position.y, _x.left_top.position.z, _x.left_top.orientation.x, _x.left_top.orientation.y, _x.left_top.orientation.z, _x.left_top.orientation.w, _x.right_bottom.position.x, _x.right_bottom.position.y, _x.right_bottom.position.z, _x.right_bottom.orientation.x, _x.right_bottom.orientation.y, _x.right_bottom.orientation.z, _x.right_bottom.orientation.w, _x.init_pose.position.x, _x.init_pose.position.y, _x.init_pose.position.z, _x.init_pose.orientation.x, _x.init_pose.orientation.y, _x.init_pose.orientation.z, _x.init_pose.orientation.w, _x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_top is None:
        self.left_top = geometry_msgs.msg.Pose()
      if self.right_bottom is None:
        self.right_bottom = geometry_msgs.msg.Pose()
      if self.init_pose is None:
        self.init_pose = geometry_msgs.msg.Pose()
      if self.target_pose is None:
        self.target_pose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cls = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cls = str[start:end]
      start = end
      end += 8
      (self.acc_prob,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state = str[start:end]
      _x = self
      start = end
      end += 232
      (_x.state_prob, _x.left_top.position.x, _x.left_top.position.y, _x.left_top.position.z, _x.left_top.orientation.x, _x.left_top.orientation.y, _x.left_top.orientation.z, _x.left_top.orientation.w, _x.right_bottom.position.x, _x.right_bottom.position.y, _x.right_bottom.position.z, _x.right_bottom.orientation.x, _x.right_bottom.orientation.y, _x.right_bottom.orientation.z, _x.right_bottom.orientation.w, _x.init_pose.position.x, _x.init_pose.position.y, _x.init_pose.position.z, _x.init_pose.orientation.x, _x.init_pose.orientation.y, _x.init_pose.orientation.z, _x.init_pose.orientation.w, _x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w,) = _get_struct_29d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cls
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.acc_prob
      buff.write(_get_struct_d().pack(_x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_29d().pack(_x.state_prob, _x.left_top.position.x, _x.left_top.position.y, _x.left_top.position.z, _x.left_top.orientation.x, _x.left_top.orientation.y, _x.left_top.orientation.z, _x.left_top.orientation.w, _x.right_bottom.position.x, _x.right_bottom.position.y, _x.right_bottom.position.z, _x.right_bottom.orientation.x, _x.right_bottom.orientation.y, _x.right_bottom.orientation.z, _x.right_bottom.orientation.w, _x.init_pose.position.x, _x.init_pose.position.y, _x.init_pose.position.z, _x.init_pose.orientation.x, _x.init_pose.orientation.y, _x.init_pose.orientation.z, _x.init_pose.orientation.w, _x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_top is None:
        self.left_top = geometry_msgs.msg.Pose()
      if self.right_bottom is None:
        self.right_bottom = geometry_msgs.msg.Pose()
      if self.init_pose is None:
        self.init_pose = geometry_msgs.msg.Pose()
      if self.target_pose is None:
        self.target_pose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cls = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cls = str[start:end]
      start = end
      end += 8
      (self.acc_prob,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state = str[start:end]
      _x = self
      start = end
      end += 232
      (_x.state_prob, _x.left_top.position.x, _x.left_top.position.y, _x.left_top.position.z, _x.left_top.orientation.x, _x.left_top.orientation.y, _x.left_top.orientation.z, _x.left_top.orientation.w, _x.right_bottom.position.x, _x.right_bottom.position.y, _x.right_bottom.position.z, _x.right_bottom.orientation.x, _x.right_bottom.orientation.y, _x.right_bottom.orientation.z, _x.right_bottom.orientation.w, _x.init_pose.position.x, _x.init_pose.position.y, _x.init_pose.position.z, _x.init_pose.orientation.x, _x.init_pose.orientation.y, _x.init_pose.orientation.z, _x.init_pose.orientation.w, _x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w,) = _get_struct_29d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_29d = None
def _get_struct_29d():
    global _struct_29d
    if _struct_29d is None:
        _struct_29d = struct.Struct("<29d")
    return _struct_29d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
