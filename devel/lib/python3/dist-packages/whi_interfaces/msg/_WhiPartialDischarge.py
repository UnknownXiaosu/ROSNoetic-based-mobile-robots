# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from whi_interfaces/WhiPartialDischarge.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WhiPartialDischarge(genpy.Message):
  _md5sum = "55e97ba29b0bc0c839a3411f235ee2dd"
  _type = "whi_interfaces/WhiPartialDischarge"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 STA_SENSOR_ERROR=0
uint8 STA_NORMAL=1
uint8 STA_CHANNEL_1_ALERT=2
uint8 STA_DISCHARGE_HIGH=3
uint8 STA_DISCHARGE_ALERT=4
float32 peak
float32 average
float32 noise
float32 phase
int32 count
int32 cycle_count
uint8 state
string channel
"""
  # Pseudo-constants
  STA_SENSOR_ERROR = 0
  STA_NORMAL = 1
  STA_CHANNEL_1_ALERT = 2
  STA_DISCHARGE_HIGH = 3
  STA_DISCHARGE_ALERT = 4

  __slots__ = ['peak','average','noise','phase','count','cycle_count','state','channel']
  _slot_types = ['float32','float32','float32','float32','int32','int32','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       peak,average,noise,phase,count,cycle_count,state,channel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WhiPartialDischarge, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.peak is None:
        self.peak = 0.
      if self.average is None:
        self.average = 0.
      if self.noise is None:
        self.noise = 0.
      if self.phase is None:
        self.phase = 0.
      if self.count is None:
        self.count = 0
      if self.cycle_count is None:
        self.cycle_count = 0
      if self.state is None:
        self.state = 0
      if self.channel is None:
        self.channel = ''
    else:
      self.peak = 0.
      self.average = 0.
      self.noise = 0.
      self.phase = 0.
      self.count = 0
      self.cycle_count = 0
      self.state = 0
      self.channel = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f2iB().pack(_x.peak, _x.average, _x.noise, _x.phase, _x.count, _x.cycle_count, _x.state))
      _x = self.channel
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.peak, _x.average, _x.noise, _x.phase, _x.count, _x.cycle_count, _x.state,) = _get_struct_4f2iB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.channel = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.channel = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f2iB().pack(_x.peak, _x.average, _x.noise, _x.phase, _x.count, _x.cycle_count, _x.state))
      _x = self.channel
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.peak, _x.average, _x.noise, _x.phase, _x.count, _x.cycle_count, _x.state,) = _get_struct_4f2iB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.channel = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.channel = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f2iB = None
def _get_struct_4f2iB():
    global _struct_4f2iB
    if _struct_4f2iB is None:
        _struct_4f2iB = struct.Struct("<4f2iB")
    return _struct_4f2iB
