# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from whi_interfaces/WhiSrvPartialDischargeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WhiSrvPartialDischargeRequest(genpy.Message):
  _md5sum = "4383f707745e4bd672d4a1b1b3a8c43a"
  _type = "whi_interfaces/WhiSrvPartialDischargeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 addr
"""
  __slots__ = ['addr']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       addr

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WhiSrvPartialDischargeRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.addr is None:
        self.addr = 0
    else:
      self.addr = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.addr
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.addr,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.addr
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.addr,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from whi_interfaces/WhiSrvPartialDischargeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import whi_interfaces.msg

class WhiSrvPartialDischargeResponse(genpy.Message):
  _md5sum = "d5f47bcb0ff8d2400d9e958c1dab9ce9"
  _type = "whi_interfaces/WhiSrvPartialDischargeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """whi_interfaces/WhiPartialDischarge[] data


================================================================================
MSG: whi_interfaces/WhiPartialDischarge
uint8 STA_SENSOR_ERROR=0
uint8 STA_NORMAL=1
uint8 STA_CHANNEL_1_ALERT=2
uint8 STA_DISCHARGE_HIGH=3
uint8 STA_DISCHARGE_ALERT=4
float32 peak
float32 average
float32 noise
float32 phase
int32 count
int32 cycle_count
uint8 state
string channel
"""
  __slots__ = ['data']
  _slot_types = ['whi_interfaces/WhiPartialDischarge[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WhiSrvPartialDischargeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = []
    else:
      self.data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.data:
        _x = val1
        buff.write(_get_struct_4f2iB().pack(_x.peak, _x.average, _x.noise, _x.phase, _x.count, _x.cycle_count, _x.state))
        _x = val1.channel
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.data is None:
        self.data = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data = []
      for i in range(0, length):
        val1 = whi_interfaces.msg.WhiPartialDischarge()
        _x = val1
        start = end
        end += 25
        (_x.peak, _x.average, _x.noise, _x.phase, _x.count, _x.cycle_count, _x.state,) = _get_struct_4f2iB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.channel = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.channel = str[start:end]
        self.data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.data:
        _x = val1
        buff.write(_get_struct_4f2iB().pack(_x.peak, _x.average, _x.noise, _x.phase, _x.count, _x.cycle_count, _x.state))
        _x = val1.channel
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.data is None:
        self.data = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data = []
      for i in range(0, length):
        val1 = whi_interfaces.msg.WhiPartialDischarge()
        _x = val1
        start = end
        end += 25
        (_x.peak, _x.average, _x.noise, _x.phase, _x.count, _x.cycle_count, _x.state,) = _get_struct_4f2iB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.channel = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.channel = str[start:end]
        self.data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f2iB = None
def _get_struct_4f2iB():
    global _struct_4f2iB
    if _struct_4f2iB is None:
        _struct_4f2iB = struct.Struct("<4f2iB")
    return _struct_4f2iB
class WhiSrvPartialDischarge(object):
  _type          = 'whi_interfaces/WhiSrvPartialDischarge'
  _md5sum = 'ecc8f660b258f268674c5e5e9427cd77'
  _request_class  = WhiSrvPartialDischargeRequest
  _response_class = WhiSrvPartialDischargeResponse
