// Generated by gencpp from file whi_interfaces/WhiSrvPartialDischargeResponse.msg
// DO NOT EDIT!


#ifndef WHI_INTERFACES_MESSAGE_WHISRVPARTIALDISCHARGERESPONSE_H
#define WHI_INTERFACES_MESSAGE_WHISRVPARTIALDISCHARGERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <whi_interfaces/WhiPartialDischarge.h>

namespace whi_interfaces
{
template <class ContainerAllocator>
struct WhiSrvPartialDischargeResponse_
{
  typedef WhiSrvPartialDischargeResponse_<ContainerAllocator> Type;

  WhiSrvPartialDischargeResponse_()
    : data()  {
    }
  WhiSrvPartialDischargeResponse_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::whi_interfaces::WhiPartialDischarge_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::whi_interfaces::WhiPartialDischarge_<ContainerAllocator> >> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct WhiSrvPartialDischargeResponse_

typedef ::whi_interfaces::WhiSrvPartialDischargeResponse_<std::allocator<void> > WhiSrvPartialDischargeResponse;

typedef boost::shared_ptr< ::whi_interfaces::WhiSrvPartialDischargeResponse > WhiSrvPartialDischargeResponsePtr;
typedef boost::shared_ptr< ::whi_interfaces::WhiSrvPartialDischargeResponse const> WhiSrvPartialDischargeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator1> & lhs, const ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator1> & lhs, const ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace whi_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5f47bcb0ff8d2400d9e958c1dab9ce9";
  }

  static const char* value(const ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5f47bcb0ff8d240ULL;
  static const uint64_t static_value2 = 0x0d9e958c1dab9ce9ULL;
};

template<class ContainerAllocator>
struct DataType< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whi_interfaces/WhiSrvPartialDischargeResponse";
  }

  static const char* value(const ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whi_interfaces/WhiPartialDischarge[] data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: whi_interfaces/WhiPartialDischarge\n"
"uint8 STA_SENSOR_ERROR=0\n"
"uint8 STA_NORMAL=1\n"
"uint8 STA_CHANNEL_1_ALERT=2\n"
"uint8 STA_DISCHARGE_HIGH=3\n"
"uint8 STA_DISCHARGE_ALERT=4\n"
"float32 peak\n"
"float32 average\n"
"float32 noise\n"
"float32 phase\n"
"int32 count\n"
"int32 cycle_count\n"
"uint8 state\n"
"string channel\n"
;
  }

  static const char* value(const ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WhiSrvPartialDischargeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whi_interfaces::WhiSrvPartialDischargeResponse_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::whi_interfaces::WhiPartialDischarge_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHI_INTERFACES_MESSAGE_WHISRVPARTIALDISCHARGERESPONSE_H
