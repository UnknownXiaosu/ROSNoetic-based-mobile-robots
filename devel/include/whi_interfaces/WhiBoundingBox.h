// Generated by gencpp from file whi_interfaces/WhiBoundingBox.msg
// DO NOT EDIT!


#ifndef WHI_INTERFACES_MESSAGE_WHIBOUNDINGBOX_H
#define WHI_INTERFACES_MESSAGE_WHIBOUNDINGBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace whi_interfaces
{
template <class ContainerAllocator>
struct WhiBoundingBox_
{
  typedef WhiBoundingBox_<ContainerAllocator> Type;

  WhiBoundingBox_()
    : cls()
    , acc_prob(0.0)
    , state()
    , state_prob(0.0)
    , left_top()
    , right_bottom()
    , init_pose()
    , target_pose()  {
    }
  WhiBoundingBox_(const ContainerAllocator& _alloc)
    : cls(_alloc)
    , acc_prob(0.0)
    , state(_alloc)
    , state_prob(0.0)
    , left_top(_alloc)
    , right_bottom(_alloc)
    , init_pose(_alloc)
    , target_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cls_type;
  _cls_type cls;

   typedef double _acc_prob_type;
  _acc_prob_type acc_prob;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _state_type;
  _state_type state;

   typedef double _state_prob_type;
  _state_prob_type state_prob;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _left_top_type;
  _left_top_type left_top;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _right_bottom_type;
  _right_bottom_type right_bottom;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _init_pose_type;
  _init_pose_type init_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target_pose_type;
  _target_pose_type target_pose;





  typedef boost::shared_ptr< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> const> ConstPtr;

}; // struct WhiBoundingBox_

typedef ::whi_interfaces::WhiBoundingBox_<std::allocator<void> > WhiBoundingBox;

typedef boost::shared_ptr< ::whi_interfaces::WhiBoundingBox > WhiBoundingBoxPtr;
typedef boost::shared_ptr< ::whi_interfaces::WhiBoundingBox const> WhiBoundingBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::whi_interfaces::WhiBoundingBox_<ContainerAllocator1> & lhs, const ::whi_interfaces::WhiBoundingBox_<ContainerAllocator2> & rhs)
{
  return lhs.cls == rhs.cls &&
    lhs.acc_prob == rhs.acc_prob &&
    lhs.state == rhs.state &&
    lhs.state_prob == rhs.state_prob &&
    lhs.left_top == rhs.left_top &&
    lhs.right_bottom == rhs.right_bottom &&
    lhs.init_pose == rhs.init_pose &&
    lhs.target_pose == rhs.target_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::whi_interfaces::WhiBoundingBox_<ContainerAllocator1> & lhs, const ::whi_interfaces::WhiBoundingBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace whi_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecec343062f58885bb78dad9096cfd28";
  }

  static const char* value(const ::whi_interfaces::WhiBoundingBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecec343062f58885ULL;
  static const uint64_t static_value2 = 0xbb78dad9096cfd28ULL;
};

template<class ContainerAllocator>
struct DataType< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whi_interfaces/WhiBoundingBox";
  }

  static const char* value(const ::whi_interfaces::WhiBoundingBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string cls\n"
"float64 acc_prob\n"
"string state\n"
"float64 state_prob\n"
"geometry_msgs/Pose left_top\n"
"geometry_msgs/Pose right_bottom\n"
"geometry_msgs/Pose init_pose\n"
"geometry_msgs/Pose target_pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::whi_interfaces::WhiBoundingBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cls);
      stream.next(m.acc_prob);
      stream.next(m.state);
      stream.next(m.state_prob);
      stream.next(m.left_top);
      stream.next(m.right_bottom);
      stream.next(m.init_pose);
      stream.next(m.target_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WhiBoundingBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whi_interfaces::WhiBoundingBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whi_interfaces::WhiBoundingBox_<ContainerAllocator>& v)
  {
    s << indent << "cls: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cls);
    s << indent << "acc_prob: ";
    Printer<double>::stream(s, indent + "  ", v.acc_prob);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state);
    s << indent << "state_prob: ";
    Printer<double>::stream(s, indent + "  ", v.state_prob);
    s << indent << "left_top: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.left_top);
    s << indent << "right_bottom: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.right_bottom);
    s << indent << "init_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.init_pose);
    s << indent << "target_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHI_INTERFACES_MESSAGE_WHIBOUNDINGBOX_H
