// Generated by gencpp from file whi_interfaces/WhiSrvIndicatorRequest.msg
// DO NOT EDIT!


#ifndef WHI_INTERFACES_MESSAGE_WHISRVINDICATORREQUEST_H
#define WHI_INTERFACES_MESSAGE_WHISRVINDICATORREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <whi_interfaces/WhiIndicator.h>

namespace whi_interfaces
{
template <class ContainerAllocator>
struct WhiSrvIndicatorRequest_
{
  typedef WhiSrvIndicatorRequest_<ContainerAllocator> Type;

  WhiSrvIndicatorRequest_()
    : instance()  {
    }
  WhiSrvIndicatorRequest_(const ContainerAllocator& _alloc)
    : instance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::whi_interfaces::WhiIndicator_<ContainerAllocator>  _instance_type;
  _instance_type instance;





  typedef boost::shared_ptr< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WhiSrvIndicatorRequest_

typedef ::whi_interfaces::WhiSrvIndicatorRequest_<std::allocator<void> > WhiSrvIndicatorRequest;

typedef boost::shared_ptr< ::whi_interfaces::WhiSrvIndicatorRequest > WhiSrvIndicatorRequestPtr;
typedef boost::shared_ptr< ::whi_interfaces::WhiSrvIndicatorRequest const> WhiSrvIndicatorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator1> & lhs, const ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.instance == rhs.instance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator1> & lhs, const ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace whi_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0be22feae3689f49092cad6c930bc797";
  }

  static const char* value(const ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0be22feae3689f49ULL;
  static const uint64_t static_value2 = 0x092cad6c930bc797ULL;
};

template<class ContainerAllocator>
struct DataType< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whi_interfaces/WhiSrvIndicatorRequest";
  }

  static const char* value(const ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whi_interfaces/WhiIndicator instance\n"
"\n"
"================================================================================\n"
"MSG: whi_interfaces/WhiIndicator\n"
"string name\n"
"string param\n"
"uint32 value\n"
;
  }

  static const char* value(const ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.instance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WhiSrvIndicatorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whi_interfaces::WhiSrvIndicatorRequest_<ContainerAllocator>& v)
  {
    s << indent << "instance: ";
    s << std::endl;
    Printer< ::whi_interfaces::WhiIndicator_<ContainerAllocator> >::stream(s, indent + "  ", v.instance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHI_INTERFACES_MESSAGE_WHISRVINDICATORREQUEST_H
