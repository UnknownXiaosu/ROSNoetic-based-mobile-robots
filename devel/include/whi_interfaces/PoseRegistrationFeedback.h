// Generated by gencpp from file whi_interfaces/PoseRegistrationFeedback.msg
// DO NOT EDIT!


#ifndef WHI_INTERFACES_MESSAGE_POSEREGISTRATIONFEEDBACK_H
#define WHI_INTERFACES_MESSAGE_POSEREGISTRATIONFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace whi_interfaces
{
template <class ContainerAllocator>
struct PoseRegistrationFeedback_
{
  typedef PoseRegistrationFeedback_<ContainerAllocator> Type;

  PoseRegistrationFeedback_()
    : feedback(0)  {
    }
  PoseRegistrationFeedback_(const ContainerAllocator& _alloc)
    : feedback(0)  {
  (void)_alloc;
    }



   typedef uint8_t _feedback_type;
  _feedback_type feedback;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PROC_STANDBY)
  #undef PROC_STANDBY
#endif
#if defined(_WIN32) && defined(PROC_ACTING)
  #undef PROC_ACTING
#endif

  enum {
    PROC_STANDBY = 0u,
    PROC_ACTING = 1u,
  };


  typedef boost::shared_ptr< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct PoseRegistrationFeedback_

typedef ::whi_interfaces::PoseRegistrationFeedback_<std::allocator<void> > PoseRegistrationFeedback;

typedef boost::shared_ptr< ::whi_interfaces::PoseRegistrationFeedback > PoseRegistrationFeedbackPtr;
typedef boost::shared_ptr< ::whi_interfaces::PoseRegistrationFeedback const> PoseRegistrationFeedbackConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator1> & lhs, const ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.feedback == rhs.feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator1> & lhs, const ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace whi_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2368efd674a454a566d52616ea8f445d";
  }

  static const char* value(const ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2368efd674a454a5ULL;
  static const uint64_t static_value2 = 0x66d52616ea8f445dULL;
};

template<class ContainerAllocator>
struct DataType< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whi_interfaces/PoseRegistrationFeedback";
  }

  static const char* value(const ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"uint8 PROC_STANDBY=0\n"
"uint8 PROC_ACTING=1\n"
"uint8 feedback\n"
"\n"
;
  }

  static const char* value(const ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseRegistrationFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whi_interfaces::PoseRegistrationFeedback_<ContainerAllocator>& v)
  {
    s << indent << "feedback: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHI_INTERFACES_MESSAGE_POSEREGISTRATIONFEEDBACK_H
