// Generated by gencpp from file whi_interfaces/WhiMotionState.msg
// DO NOT EDIT!


#ifndef WHI_INTERFACES_MESSAGE_WHIMOTIONSTATE_H
#define WHI_INTERFACES_MESSAGE_WHIMOTIONSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace whi_interfaces
{
template <class ContainerAllocator>
struct WhiMotionState_
{
  typedef WhiMotionState_<ContainerAllocator> Type;

  WhiMotionState_()
    : header()
    , state(0)  {
    }
  WhiMotionState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STA_STANDBY)
  #undef STA_STANDBY
#endif
#if defined(_WIN32) && defined(STA_BOOTING)
  #undef STA_BOOTING
#endif
#if defined(_WIN32) && defined(STA_RUNNING)
  #undef STA_RUNNING
#endif
#if defined(_WIN32) && defined(STA_TURNING_LEFT)
  #undef STA_TURNING_LEFT
#endif
#if defined(_WIN32) && defined(STA_TURNING_RIGHT)
  #undef STA_TURNING_RIGHT
#endif
#if defined(_WIN32) && defined(STA_OPERATING)
  #undef STA_OPERATING
#endif
#if defined(_WIN32) && defined(STA_CRITICAL_COLLISION)
  #undef STA_CRITICAL_COLLISION
#endif
#if defined(_WIN32) && defined(STA_CRITICAL_COLLISION_CLEAR)
  #undef STA_CRITICAL_COLLISION_CLEAR
#endif
#if defined(_WIN32) && defined(STA_ESTOP)
  #undef STA_ESTOP
#endif
#if defined(_WIN32) && defined(STA_ESTOP_CLEAR)
  #undef STA_ESTOP_CLEAR
#endif
#if defined(_WIN32) && defined(STA_FAULT)
  #undef STA_FAULT
#endif

  enum {
    STA_STANDBY = 0u,
    STA_BOOTING = 1u,
    STA_RUNNING = 2u,
    STA_TURNING_LEFT = 3u,
    STA_TURNING_RIGHT = 4u,
    STA_OPERATING = 5u,
    STA_CRITICAL_COLLISION = 6u,
    STA_CRITICAL_COLLISION_CLEAR = 7u,
    STA_ESTOP = 8u,
    STA_ESTOP_CLEAR = 9u,
    STA_FAULT = 10u,
  };


  typedef boost::shared_ptr< ::whi_interfaces::WhiMotionState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whi_interfaces::WhiMotionState_<ContainerAllocator> const> ConstPtr;

}; // struct WhiMotionState_

typedef ::whi_interfaces::WhiMotionState_<std::allocator<void> > WhiMotionState;

typedef boost::shared_ptr< ::whi_interfaces::WhiMotionState > WhiMotionStatePtr;
typedef boost::shared_ptr< ::whi_interfaces::WhiMotionState const> WhiMotionStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whi_interfaces::WhiMotionState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whi_interfaces::WhiMotionState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::whi_interfaces::WhiMotionState_<ContainerAllocator1> & lhs, const ::whi_interfaces::WhiMotionState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::whi_interfaces::WhiMotionState_<ContainerAllocator1> & lhs, const ::whi_interfaces::WhiMotionState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace whi_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::WhiMotionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::WhiMotionState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::WhiMotionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::WhiMotionState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::WhiMotionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::WhiMotionState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whi_interfaces::WhiMotionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91bce09ed9af109b0e85285fbbe8d1bc";
  }

  static const char* value(const ::whi_interfaces::WhiMotionState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91bce09ed9af109bULL;
  static const uint64_t static_value2 = 0x0e85285fbbe8d1bcULL;
};

template<class ContainerAllocator>
struct DataType< ::whi_interfaces::WhiMotionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whi_interfaces/WhiMotionState";
  }

  static const char* value(const ::whi_interfaces::WhiMotionState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whi_interfaces::WhiMotionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint8 state\n"
"uint8 STA_STANDBY=0\n"
"uint8 STA_BOOTING=1\n"
"uint8 STA_RUNNING=2\n"
"uint8 STA_TURNING_LEFT=3\n"
"uint8 STA_TURNING_RIGHT=4\n"
"uint8 STA_OPERATING=5\n"
"uint8 STA_CRITICAL_COLLISION=6\n"
"uint8 STA_CRITICAL_COLLISION_CLEAR=7\n"
"uint8 STA_ESTOP=8\n"
"uint8 STA_ESTOP_CLEAR=9\n"
"uint8 STA_FAULT=10\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::whi_interfaces::WhiMotionState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whi_interfaces::WhiMotionState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WhiMotionState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whi_interfaces::WhiMotionState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whi_interfaces::WhiMotionState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHI_INTERFACES_MESSAGE_WHIMOTIONSTATE_H
