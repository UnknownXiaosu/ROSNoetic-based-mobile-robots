// Generated by gencpp from file whi_interfaces/WhiVectorFloat.msg
// DO NOT EDIT!


#ifndef WHI_INTERFACES_MESSAGE_WHIVECTORFLOAT_H
#define WHI_INTERFACES_MESSAGE_WHIVECTORFLOAT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace whi_interfaces
{
template <class ContainerAllocator>
struct WhiVectorFloat_
{
  typedef WhiVectorFloat_<ContainerAllocator> Type;

  WhiVectorFloat_()
    : name()
    , data()
    , items_name()
    , items_unit()  {
    }
  WhiVectorFloat_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , data(_alloc)
    , items_name(_alloc)
    , items_unit(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _data_type;
  _data_type data;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _items_name_type;
  _items_name_type items_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _items_unit_type;
  _items_unit_type items_unit;





  typedef boost::shared_ptr< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> const> ConstPtr;

}; // struct WhiVectorFloat_

typedef ::whi_interfaces::WhiVectorFloat_<std::allocator<void> > WhiVectorFloat;

typedef boost::shared_ptr< ::whi_interfaces::WhiVectorFloat > WhiVectorFloatPtr;
typedef boost::shared_ptr< ::whi_interfaces::WhiVectorFloat const> WhiVectorFloatConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::whi_interfaces::WhiVectorFloat_<ContainerAllocator1> & lhs, const ::whi_interfaces::WhiVectorFloat_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.data == rhs.data &&
    lhs.items_name == rhs.items_name &&
    lhs.items_unit == rhs.items_unit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::whi_interfaces::WhiVectorFloat_<ContainerAllocator1> & lhs, const ::whi_interfaces::WhiVectorFloat_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace whi_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3f1b319acd35125ad913749638f6185";
  }

  static const char* value(const ::whi_interfaces::WhiVectorFloat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3f1b319acd35125ULL;
  static const uint64_t static_value2 = 0xad913749638f6185ULL;
};

template<class ContainerAllocator>
struct DataType< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whi_interfaces/WhiVectorFloat";
  }

  static const char* value(const ::whi_interfaces::WhiVectorFloat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"float32[] data\n"
"string[] items_name\n"
"string[] items_unit\n"
;
  }

  static const char* value(const ::whi_interfaces::WhiVectorFloat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.data);
      stream.next(m.items_name);
      stream.next(m.items_unit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WhiVectorFloat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whi_interfaces::WhiVectorFloat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whi_interfaces::WhiVectorFloat_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "items_name[]" << std::endl;
    for (size_t i = 0; i < v.items_name.size(); ++i)
    {
      s << indent << "  items_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.items_name[i]);
    }
    s << indent << "items_unit[]" << std::endl;
    for (size_t i = 0; i < v.items_unit.size(); ++i)
    {
      s << indent << "  items_unit[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.items_unit[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHI_INTERFACES_MESSAGE_WHIVECTORFLOAT_H
